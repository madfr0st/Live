
static class AVLTree {

    static class Node{
        Node left;
        Node right;
        int data;
        int lis;
        int height;
        int size;

        public static Node newNode(int data){
            Node n = new Node();
            n.left = null;
            n.right = null;
            n.data = data;
            n.lis = -1;
            n.height = 1;
            n.size = 1;
            return n;
        }
    }
    private Node leftRotate(Node root) {
        Node newRoot = root.right;
        root.right = root.right.left;
        newRoot.left = root;
        root.height = setHeight(root);
        root.size = setSize(root);
        newRoot.height = setHeight(newRoot);
        newRoot.size = setSize(newRoot);
        return newRoot;
    }

    private Node rightRotate(Node root) {
        Node newRoot = root.left;
        root.left = root.left.right;
        newRoot.right = root;
        root.height = setHeight(root);
        root.size = setSize(root);
        newRoot.height = setHeight(newRoot);
        newRoot.size = setSize(newRoot);
        return newRoot;
    }

    private int setHeight(Node root) {
        if (root == null) {
            return 0;
        }
        return 1 + Math.max((root.left != null ? root.left.height : 0), (root.right != null ? root.right.height : 0));
    }

    private int height(Node root) {
        if (root == null) {
            return 0;
        } else {
            return root.height;
        }
    }

    private int setSize(Node root) {
        if (root == null) {
            return 0;
        }
        return 1 + Math.max((root.left != null ? root.left.size : 0), (root.right != null ? root.right.size : 0));
    }

    public Node insert(Node root, int data) {
        if (root == null) {
            return Node.newNode(data);
        }
        if (root.data <= data) {
            root.right = insert(root.right, data);
        } else {
            root.left = insert(root.left, data);
        }
        int balance = balance(root.left, root.right);
        if (balance > 1) {
            if (height(root.left.left) >= height(root.left.right)) {
                root = rightRotate(root);
            } else {
                root.left = leftRotate(root.left);
                root = rightRotate(root);
            }
        } else if (balance < -1) {
            if (height(root.right.right) >= height(root.right.left)) {
                root = leftRotate(root);
            } else {
                root.right = rightRotate(root.right);
                root = leftRotate(root);
            }
        } else {
            root.height = setHeight(root);
            root.size = setSize(root);
        }
        return root;
    }

    private int balance(Node rootLeft, Node rootRight) {
        return height(rootLeft) - height(rootRight);
    }

}
